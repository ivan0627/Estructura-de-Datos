/*
.Escriba una funci√≥n que reciba un n√∫mero entero positivo, y que retorne
la suma de los divisores de ese n√∫mero que son inferiores al n√∫mero. Es
decir, la funci√≥n debe sumar los divisores del n√∫mero ùëõ, que se
encuentran entre 1 y ùëõ‚àí1. Por ejemplo, los divisores de 18 son 1,2,3,6,9,18.
Pero la suma de los divisores inferiores no debe tener en cuenta el
n√∫mero, es decir, para el 18, la suma de sus divisores inferiores
ser√≠a 1+2+3+6+9=21. Escriba un programa que, usando la funci√≥n anterior,
lea un n√∫mero entero y obtenga la suma de los divisores inferiores de ese
n√∫mero.
 */

package Taller03

fun main(){

    print("Digite el n√∫mero entero positivo a evaluar: ")
    var n= readLine()!!.toInt()
    var (s,divisores)= numeroDivisoressinn(n)
    println("La suma de sus divisores es de $s, los valores son $divisores=$s")
}
fun numeroDivisoressinn(n:Int): Pair<Int,String>{
    var s=0
    var divisores =""
    for(i in 1..(n-1)){
        val modulo=n%i
        if(modulo==0){
            s=s+i
            divisores=when{
                divisores=="" -> i.toString()
                else -> divisores+","+i
            }

        }
    }
    return s to divisores
}